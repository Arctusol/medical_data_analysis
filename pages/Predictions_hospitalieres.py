import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np

# CSS personnalis√©
st.markdown("""
    <style>
    .main-title {
        color: #2c3e50;
        text-align: center;
        padding: 1rem 0;
    }
    .prediction-card {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin: 1rem 0;
    }
    </style>
""", unsafe_allow_html=True)

# D√©finition des couleurs du th√®me
MAIN_COLOR = '#003366'  # Bleu marine principal
SECONDARY_COLOR = '#AFDC8F'  # Vert clair compl√©mentaire
ACCENT_COLOR = '#3D7317'  # Vert fonc√© pour les accents

# Titre principal
st.markdown("<h1 class='main-title' style='margin-top: -70px;'>üé≤ Pr√©dictions Hospitali√®res</h1>", unsafe_allow_html=True)

# S√©lecteur de type de pr√©diction
prediction_type = st.selectbox(
    "Choisissez le type de pr√©diction",
    ["Besoins en lits", "Tendances d'hospitalisation", "Dur√©es de s√©jour"]
)

# Filtres communs
col1, col2, col3 = st.columns(3)
with col1:
    region = st.selectbox("R√©gion", ["Toutes les r√©gions", "√éle-de-France", "Auvergne-Rh√¥ne-Alpes", "Nouvelle-Aquitaine"])
with col2:
    specialite = st.selectbox("Sp√©cialit√©", ["Toutes les sp√©cialit√©s", "M√©decine", "Chirurgie", "Obst√©trique", "SSR", "Psychiatrie"])
with col3:
    horizon = st.selectbox("Horizon de pr√©diction", ["1 mois", "3 mois", "6 mois", "1 an"])

# Fonction pour g√©n√©rer des donn√©es simul√©es
def generate_mock_data(days=365):
    dates = [datetime.now() + timedelta(days=x) for x in range(days)]
    values = np.random.normal(100, 15, days) + np.sin(np.array(range(days))/30.0)*20
    return pd.DataFrame({
        'Date': dates,
        'Valeur': values
    })

# Affichage selon le type de pr√©diction
if prediction_type == "Besoins en lits":
    st.markdown("""
        <div class='prediction-card'>
        <h3>üìä Pr√©diction des besoins en lits</h3>
        <p>Cette section utilise des mod√®les de machine learning pour pr√©dire les besoins futurs en lits hospitaliers,
        en tenant compte des tendances historiques, des variations saisonni√®res et des facteurs d√©mographiques.</p>
        </div>
    """, unsafe_allow_html=True)
    
    # Graphique de pr√©diction
    col_chart, col_help = st.columns([1, 0.01])
    with col_chart:
        df = generate_mock_data()
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df['Date'][:180],
            y=df['Valeur'][:180],
            name='Donn√©es historiques',
            line=dict(color=MAIN_COLOR)
        ))
        fig.add_trace(go.Scatter(
            x=df['Date'][180:],
            y=df['Valeur'][180:],
            name='Pr√©dictions',
            line=dict(color=SECONDARY_COLOR, dash='dash')
        ))
        fig.update_layout(
            title='Pr√©diction des besoins en lits',
            xaxis_title='Date',
            yaxis_title='Nombre de lits n√©cessaires',
            template='plotly_white'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col_help:
        st.metric(
            label="help",
            value="",
            help="""üìà Graphique de pr√©diction des besoins en lits :
            
            - Ligne continue : donn√©es historiques observ√©es
            - Ligne pointill√©e : pr√©dictions futures
            
            Le mod√®le prend en compte :
            - Les tendances historiques
            - Les variations saisonni√®res
            - Les facteurs d√©mographiques
            
            Utilisez les filtres en haut pour affiner les pr√©dictions par r√©gion et sp√©cialit√©."""
        )

elif prediction_type == "Tendances d'hospitalisation":
    st.markdown("""
        <div class='prediction-card'>
        <h3>üìà Analyse des tendances d'hospitalisation</h3>
        <p>Visualisez les tendances futures d'hospitalisation bas√©es sur l'analyse des donn√©es historiques
        et les facteurs saisonniers.</p>
        </div>
    """, unsafe_allow_html=True)
    
    # Graphique des tendances
    col_chart, col_help = st.columns([1, 0.01])
    with col_chart:
        df = generate_mock_data()
        fig = px.line(df, x='Date', y='Valeur',
                     title='Tendances d\'hospitalisation pr√©vues')
        fig.update_traces(line_color=MAIN_COLOR)
        fig.add_hrect(
            y0=df['Valeur'].mean() - df['Valeur'].std(),
            y1=df['Valeur'].mean() + df['Valeur'].std(),
            fillcolor=SECONDARY_COLOR,
            opacity=0.2,
            layer="below",
            line_width=0,
        )
        fig.update_layout(template='plotly_white')
        st.plotly_chart(fig, use_container_width=True)
    
    with col_help:
        st.metric(
            label="help",
            value="",
            help="""üìà Analyse des tendances d'hospitalisation :

            - Ligne bleue : √©volution pr√©vue des hospitalisations
            - Zone color√©e : intervalle de confiance
            
            Le graphique montre :
            - Les variations saisonni√®res attendues
            - Les tendances √† long terme
            - Les p√©riodes de forte/faible activit√©
            
            La zone color√©e repr√©sente la plage de valeurs probable (¬±1 √©cart-type)."""
        )

else:  # Dur√©es de s√©jour
    st.markdown("""
        <div class='prediction-card'>
        <h3>‚è±Ô∏è Pr√©vision des dur√©es de s√©jour</h3>
        <p>Estimez les dur√©es moyennes de s√©jour futures par service et par type de pathologie
        pour optimiser la gestion des ressources hospitali√®res.</p>
        </div>
    """, unsafe_allow_html=True)
    
    # Graphique des dur√©es de s√©jour
    col_chart, col_help = st.columns([1, 0.01])
    with col_chart:
        services = ['M√©decine', 'Chirurgie', 'Obst√©trique', 'SSR', 'Psychiatrie']
        durees = np.random.normal(7, 2, len(services))
        fig = go.Figure(data=[
            go.Bar(name='Dur√©e moyenne actuelle', x=services, y=durees, marker_color=MAIN_COLOR),
            go.Bar(name='Pr√©vision √† 3 mois', x=services, y=durees*1.1, marker_color=SECONDARY_COLOR)
        ])
        fig.update_layout(
            title='Dur√©es moyennes de s√©jour par service',
            barmode='group',
            template='plotly_white'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col_help:
        st.metric(
            label="help",
            value="",
            help="""‚è±Ô∏è Pr√©vision des dur√©es de s√©jour :

            Comparaison par service :
            - Barres bleues : dur√©es moyennes actuelles
            - Barres vertes : pr√©visions √† 3 mois
            
            Caract√©ristiques par service :
            - M√©decine : s√©jours courts √† moyens
            - Chirurgie : dur√©e variable selon l'intervention
            - Obst√©trique : s√©jours courts et standardis√©s
            - SSR : s√©jours longs de r√©adaptation
            - Psychiatrie : s√©jours g√©n√©ralement plus longs
            
            Ces pr√©visions aident √† optimiser la gestion des lits."""
        )

# M√©triques de performance
st.markdown("### üìä Mod√®le de pr√©diction", unsafe_allow_html=True)
col1, col2, col3, col_help = st.columns([1, 1, 1, 0.01])
with col1:
    st.metric("Pr√©cision du mod√®le", "87%", "‚Üë 2%")
with col2:
    st.metric("MAE", "4.3 jours", "‚Üì 0.5")
with col3:
    st.metric("R¬≤", "0.83", "‚Üë 0.02")
with col_help:
    st.metric(
        label="help",
        value="",
        help="""üìä Indicateurs de performance du mod√®le :
        
        - Pr√©cision : pourcentage de pr√©dictions correctes (¬±10% de marge)
        - MAE (Mean Absolute Error) : erreur moyenne en jours
        - R¬≤ : qualit√© d'ajustement du mod√®le (0 √† 1)
        
        Les fl√®ches indiquent l'√©volution par rapport au mois pr√©c√©dent :
        ‚Üë : am√©lioration
        ‚Üì : diminution"""
    )

# R√©sultats
st.markdown("### üìà R√©sultats", unsafe_allow_html=True)
st.write("Les r√©sultats sont affich√©s ci-dessus en fonction du type de pr√©diction s√©lectionn√©.")

# Performance du mod√®le
st.markdown("### üìâ Performance du mod√®le", unsafe_allow_html=True)
st.write("Les m√©triques de performance sont affich√©es ci-dessus.")

# Pr√©visions
st.markdown("### üéØ Pr√©visions", unsafe_allow_html=True)
st.write("Les pr√©visions sont affich√©es ci-dessus en fonction du type de pr√©diction s√©lectionn√©.")

# Notes m√©thodologiques
with st.expander("üìù Notes m√©thodologiques"):
    st.markdown("""
    ### M√©thodologie de pr√©diction
    
    Notre mod√®le utilise une combinaison de :
    - S√©ries temporelles avanc√©es (SARIMA, Prophet)
    - Machine Learning (Random Forest, XGBoost)
    - Facteurs externes (donn√©es d√©mographiques, √©pid√©miologiques)
    
    ### Sources de donn√©es
    - Historique des hospitalisations (PMSI)
    - Donn√©es d√©mographiques (INSEE)
    - Facteurs saisonniers
    
    ### Limitations
    - Les pr√©dictions sont des estimations bas√©es sur les donn√©es historiques
    - Les √©v√©nements exceptionnels peuvent impacter la pr√©cision
    - Mise √† jour mensuelle des mod√®les
    """)

# Avertissement
st.info("‚ö†Ô∏è Ces pr√©dictions sont des estimations bas√©es sur des mod√®les statistiques et doivent √™tre utilis√©es comme aide √† la d√©cision uniquement.")
